# use minimal Travis build image so that we could install our own JDK (Graal) and Maven
# use newest available minimal distro - see https://docs.travis-ci.com/user/languages/minimal-and-generic/
dist: bionic
language: minimal

services:
  - docker

jobs:
  include:
    - script:
        # Install GraalVM with SDKMAN
        - curl -s "https://get.sdkman.io" | bash
        - source "$HOME/.sdkman/bin/sdkman-init.sh"
        - sdk install java 20.1.0.r11-grl

        # Check if GraalVM was installed successfully
        - java -version

        # Install Maven, that uses GraalVM for later builds
        - sdk install maven

        # Show Maven using GraalVM JDK
        - mvn --version

        # Install GraalVM Native Image
        - gu install native-image

        # Check if Native Image was installed properly
        - native-image --version

        # Run GraalVM Native Image compilation of Spring Boot App (Maven version instead of ./compile.sh)
        - mvn -Pnative clean package

      name: "Native Image compile on Travis Host"

    - script:
        # Login into Heroku Container Registry first, so that we can push our Image later
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin registry.heroku.com

        # Compile App with Docker
        - docker build . --tag=registry.heroku.com/qrcode-spring/web

        # Push to Heroku Container Registry
        - docker push registry.heroku.com/qrcode-spring/web

        # Release Dockerized Native Spring Boot App on Heroku
        - ./heroku-release.sh qrcode-spring

        # Push to Docker Hub also, since automatic Builds there don't have anough RAM to do a docker build
        - echo "$DOCKER_HUB_TOKEN" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
        - docker tag registry.heroku.com/qrcode-spring/web giskardocker80/qrcode-spring:latest
        - docker push giskardocker80/qrcode-spring:latest

      name: "Native Image compile in Docker on Travis & Push to Heroku Container Registry"